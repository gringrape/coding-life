/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tdd;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;

import static org.junit.jupiter.api.Assertions.*;

class MoneyTest {
    private Expression fiveBucks;
    private Expression tenFrancs;
    private Bank bank;

    @BeforeEach
    void setup() {
        fiveBucks = Money.dollar(5);
        tenFrancs = Money.franc(10);
        bank = new Bank();
        bank.addRate("CHF", "USD", 2);
    }

    @Test
    void testMultiplication() {
        assertEquals(Money.dollar(10), fiveBucks.times(2));
        assertEquals(Money.dollar(15), fiveBucks.times(3));
    }

    @Test
    void testEquality() {
        assertEquals(Money.dollar(5), Money.dollar(5));
        assertNotEquals(Money.dollar(5), Money.dollar(6));
        assertNotEquals(Money.franc(5), Money.dollar(5));
    }

    @Test
    void testCurrency() {
        assertEquals("USD", Money.dollar(1).currency());
        assertEquals("CHF", Money.franc(1).currency());
    }

    @Test
    void testSimpleAddition() {
        Expression sum = fiveBucks.plus(fiveBucks);
        Money reduced = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(10), reduced);
    }

    @Test
    void testReduceSum() {
        Sum sum = new Sum(
                Money.dollar(3), Money.dollar(4)
        );
        Money reduced = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(7), reduced);
    }

    @Test
    void testReduceMoney() {
        Money reduced = bank.reduce(Money.dollar(1), "USD"); // USD -> USD
        assertEquals(Money.dollar(1), reduced);
    }

    @Test
    void testExchange() {
        Money reduced = bank.reduce(Money.franc(2), "USD");
        assertEquals(Money.dollar(1), reduced);
    }

    @Test
    void testIdentityExchange() {
        Money reduced = bank.reduce(Money.dollar(1), "USD");
        assertEquals(Money.dollar(1), reduced);
    }

    @Test
    void testDifferentCurrencyAddition() {
        Expression sum = tenFrancs.plus(fiveBucks);
        Money reduced = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(10), reduced);
    }

    // working memory => flush
    // red => working memory 과부하 => 짜증남, 현실부정

    @Test
    void testSumPlus() {
        Expression sum = new Sum(fiveBucks, tenFrancs).plus(fiveBucks);
        Money reduced = bank.reduce(sum, "USD");
        assertEquals(Money.dollar(15), reduced);
    }

    @Test
    void testSumTimes() {
        Expression product = new Sum(fiveBucks, tenFrancs).times(2);
        Money reduced = bank.reduce(product, "USD");
        assertEquals(Money.dollar(20), reduced);
    }

    @Test
    void testPlusSameCurrency() {
        Expression sum = fiveBucks.plus(fiveBucks);
        assertTrue(sum instanceof Money);
    }
}
